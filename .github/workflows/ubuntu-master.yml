# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: ubuntu-master

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - run: mkdir -p ~/image-cache

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - id: image-cache
        uses: actions/cache@v1
        with:
          path: ~/image-cache
          key: image-cache-${{ runner.os }}

      - if: steps.image-cache.outputs.cache-hit == 'true'
        run: docker load -i ~/image-cache/cartridge.tar

      - name: Build with Maven
        env:
          TARANTOOL_SERVER_USER: root
          TARANTOOL_SERVER_GROUP: root
        run: mvn -B verify --file pom.xml

      - name: Run enterprise tests
        env:
          TARANTOOL_SERVER_USER: root
          TARANTOOL_SERVER_GROUP: root
          DOWNLOAD_SDK_URI: ${{ secrets.DOWNLOAD_SDK_URI }}
        run: mvn -B test -P enterprise --file pom.xml

      - if: steps.image-cache.outputs.cache-hit != 'true'
        run: |
          docker save -o ~/image-cache/cartridge.tar cartridge
